End-to-End Encrypted Real-Time Chat Application - Testing the Project
===================================================================

Overview
--------
This guide tests the End-to-End Encrypted Real-Time Chat Application’s functionality, security, and UI. It uses ECDH (P-256), AES-256-CBC, and HMAC-SHA256 for secure messaging with a WhatsApp-inspired interface (teal header, green/white bubbles, timestamps). Tests verify encryption, messaging, error handling, and responsiveness.

Prerequisites
-------------
- Running Server: Follow Running_the_Project.txt to start the server with `node server.js`.
- Browser: Firefox or Chrome, with self-signed certificate accepted at https://localhost:3000.
- DevTools: Open with F12 to inspect WebSocket messages (Network > WS) and console logs (Console).
- Tools: Text editor (e.g., VS Code) to modify client.js for testing, access to server console for logs.

Test Scenarios
--------------
1. Client Connection
   - Open two browser tabs at https://localhost:3000.
   - Verify:
     - Each tab displays a unique Client ID in the header (e.g., 30efc335-1c2e-4ed7-96bc-c2bc5237caa8, 92n74gzf9ge).
     - Header shows "End-to-End Encrypted Real-Time Chat Application" with teal background (#075E54).
   - Expected: Unique Client IDs, teal header, light gray chat area (#ECE5DD).

2. Recipient Selection
   - In Tab 1 (Client A): Check dropdown (#clients) lists Client B’s ID (e.g., 92n74gzf9ge).
   - In Tab 2 (Client B): Check dropdown lists Client A’s ID.
   - Select Client B in Tab 1 and Client A in Tab 2.
   - Expected: Dropdowns exclude own Client ID and correctly list other connected clients.

3. Send and Receive Messages
   - In Tab 1:
     - Select Client B in dropdown, type "Hello" in input (#message), click send button (#send, paper plane icon) or press Enter.
   - Verify:
     - Tab 1: Shows green, right-aligned message: "<strong>To 92n74gzf9ge:</strong> Hello" with timestamp (e.g., "12:57 PM").
     - Tab 2: Shows white, left-aligned message: "<strong>30efc335-...:</strong> Hello" with timestamp.
   - Expected: Messages delivered instantly, styled correctly, chat area auto-scrolls to latest message.

4. UI Verification
   - Check UI elements:
     - Header: Teal (#075E54), displays correct title.
     - Chat Area: Light gray (#ECE5DD), sent messages green (#DCF8C6), received messages white (#FFFFFF).
     - Input Area: Bottom bar (#F0F0F0), styled dropdown, rounded input (#message), teal send button.
     - Timestamps: Small, gray, right-aligned in message bubbles.
   - Resize window to 600px using DevTools (Responsive Design Mode).
   - Expected: Responsive layout with smaller fonts and tighter margins.

5. Security Testing
   - Purpose: Verify end-to-end encryption, key exchange, message integrity, and TLS security to ensure confidentiality, authenticity, and robustness.
   - Tools: DevTools (Network > WS for WebSocket messages, Security for TLS), text editor to modify client.js, server console for logs.

   a. ECDH Key Exchange
      - Open two tabs (Client A, Client B).
      - In DevTools (Network > WS), inspect WebSocket messages after connection.
      - Verify:
        - Client A sends message: { type: 'publicKey', from: "<ClientA_ID>", publicKey: <byte_array> } (~client.js:45).
        - Client B receives it, and Client A receives Client B’s publicKey (~server/messages.js:13).
        - Server console logs: "Storing and broadcasting public key from: <ClientA_ID>" (~server/messages.js:13).
      - Test Malformed Key:
        - Edit client.js (~line 45) to send a truncated publicKey (e.g., first 10 bytes of the key).
        - Restart Tab 1, send message to Client B.
        - Expected: Client B displays an error in red, e.g., "<div class='error'>Error: Invalid key format</div>" (~client.js:65, exact message depends on client.js).
      - Test Key Exchange Completion:
        - Send a message from Client A to B after key exchange.
        - Verify: Message is encrypted (see below), indicating shared secret was derived (~client.js:75).
      - Expected: Public keys exchanged correctly, malformed keys rejected, shared secrets established.

   b. AES-256-CBC Encryption/Decryption
      - Send message "Test" from Client A to Client B.
      - In DevTools (Network > WS), inspect the WebSocket message:
        - Format: { type: 'encryptedMessage', from: "<ClientA_ID>", to: "<ClientB_ID>", iv: <16-byte_array>, ciphertext: <byte_array>, hmac: <32-byte_array> } (~client.js:147).
        - Verify: No plaintext ("Test") appears in WebSocket traffic.
      - Test IV Uniqueness:
        - Send three messages from Client A to B.
        - Compare iv values in WebSocket messages (DevTools > Network > WS).
        - Expected: Each iv is unique, generated by crypto.getRandomValues (~client.js:147).
      - Test Decryption Failure:
        - Edit client.js (~line 147) to corrupt ciphertext (e.g., replace first byte with 0x00).
        - Send message from Client A to B.
        - Expected: Client B displays an error in red, e.g., "<div class='error'>Error: Decryption failed</div>" (~client.js:108, exact message depends on client.js).
      - Expected: Messages encrypted securely, plaintext not exposed, unique IVs, decryption errors handled.

   c. HMAC-SHA256 Verification
      - Send message "Test" from Client A to Client B.
      - In DevTools (Network > WS), verify encryptedMessage includes hmac field (32-byte array) (~client.js:147).
      - Test HMAC Tampering:
        - Edit client.js (~line 147) to replace hmac with a random 32-byte array.
        - Send message from Client A to B.
        - Expected: Client B displays an error in red: "<div class='error'>Error: HMAC verification failed</div>" (~client.js:108).
      - Test Timing-Safe Comparison:
        - Edit client.js (~line 108) to replace crypto.subtle.timingSafeEqual with a regular comparison (e.g., hmac1 == hmac2).
        - Send a valid message from Client A to B.
        - Add console.time('hmac') and console.timeEnd('hmac') around the comparison in client.js.
        - Compare timing with original timingSafeEqual (restore client.js, repeat).
        - Expected: Regular comparison shows variable timing (vulnerable to side-channel attacks), timingSafeEqual shows constant timing.
      - Expected: HMAC ensures integrity and authenticity, tampering detected, timing-safe verification prevents side-channel attacks.

   d. Missing Shared Secret
      - Open a new tab (Client C).
      - Immediately send a message to Client A before key exchange completes.
      - Expected: Client C displays an error in red: "<div class='error'>No shared secret with <ClientA_ID></div>" (~client.js:108).
      - Verify: Server does not forward the message (~server/messages.js:33).

   e. TLS Certificate Validation
      - Access https://localhost:3000 in Chrome or Firefox.
      - Verify: Browser shows a certificate warning due to self-signed certificate (~server.js:7).
      - In DevTools (Security tab), check certificate details:
        - Issued to: "localhost", valid for 365 days.
      - Test Invalid Certificate:
        - Replace cert.pem with an expired or invalid certificate (e.g., generate with `openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days -1` for expired).
        - Restart server (`node server.js`).
        - Access https://localhost:3000.
        - Expected: Browser rejects connection or shows an enhanced warning (e.g., "NET::ERR_CERT_DATE_INVALID").
      - Expected: TLS secures WebSocket communication, invalid certificates are rejected by the browser.

   f. Tampered Message Handling
      - Edit client.js (~line 147) to send an encryptedMessage missing the iv field (e.g., set iv: null).
      - Send message from Client A to B.
      - Expected: Client B displays an error in red, e.g., "<div class='error'>Error: Invalid message format</div>", or server rejects the message (~server/messages.js:33).
      - Test Invalid Recipient:
        - Edit client.js (~line 147) to send encryptedMessage to a non-existent UUID (e.g., "00000000-0000-0000-0000-000000000000").
        - Send message from Client A.
        - Expected: Client A receives an error in red: "<div class='error'>Recipient <UUID> not found or not connected</div>" (~server/messages.js:36).
      - Expected: Malformed or invalid messages are rejected, ensuring robust message handling.

   - Expected Outcome: ECDH key exchange establishes secure shared secrets, AES-256-CBC ensures message confidentiality, HMAC-SHA256 verifies integrity and authenticity, TLS secures transport, and error handling prevents processing of invalid or tampered messages.

6. Error Handling
   - Test No Shared Secret:
     - Send a message immediately after opening a new tab, before key exchange.
     - Expected: Error displayed in red: "<div class='error'>No shared secret with <ClientID></div>" (~client.js:108).
   - Test Key Exchange Timeout:
     - Open Tab 2, disconnect it (close tab) during key exchange, then send a message from Tab 1.
     - Expected: Error displayed in red: "<div class='error'>Key exchange timed out</div>" (~client.js:108, exact message depends on client.js).
   - Test Invalid Recipient:
     - Edit client.js to send an encryptedMessage to an unknown UUID (~line 147).
     - Expected: Error displayed in red: "<div class='error'>Recipient <UUID> not found or not connected</div>" (~server/messages.js:36).
   - Test Invalid Message Type:
     - Edit client.js to send a message with { type: 'invalid' } (~line 147).
     - Expected: Error displayed in red: "<div class='error'>Unknown message type: invalid</div>" (~server/websocket.js:33).
   - Test WebSocket Disconnection:
     - Stop the server (Ctrl+C), then refresh Tab 1.
     - Expected: Error displayed in red: "<div class='error'>Disconnected from server</div>" (~client.js:27).
   - Expected: All errors are displayed in red, centered in the chat area.

7. Multiple Clients
   - Open three tabs (Clients A, B, C).
   - From Client A, send messages to Client B and Client C.
   - Verify:
     - Messages appear with correct recipient IDs in sent bubbles (e.g., "<strong>To <ClientB_ID>:</strong>").
     - No messages are delivered to unintended clients (no cross-talk).
   - Expected: Messages are correctly routed to selected recipients.